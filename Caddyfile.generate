#! /usr/bin/env python3
# Copyright (C) 2018 Sebastian Pipping <sebastian@pipping.org>
# Licensed under GNU Affero GPL v3 or later

import subprocess
import sys
from argparse import ArgumentParser
from collections import namedtuple
from configparser import ConfigParser, NoOptionError
from contextlib import suppress
from operator import attrgetter
from tempfile import NamedTemporaryFile
from textwrap import dedent


class CaddyfileGenerator:
    Site = namedtuple(
        "Site",
        [
            "alias_domains",
            "backend_authority",
            "domain",
        ],
    )

    def __init__(self):
        self._sites = []

    def add(self, site):
        self._sites.append(site)

    def write_to(self, fp):
        print(
            dedent("""\
                # NOTE: This file has been generated, do not edit
                (common) {
                    encode zstd gzip
                    log {
                        output stdout
                    }
                }"""),
            file=fp,
        )

        sites_with_backends: list[self.Site] = [
            s for s in self._sites if s.backend_authority is not None
        ]
        sites_with_alias_domains: list[self.Site] = [s for s in self._sites if s.alias_domains]

        for site in sorted(sites_with_backends, key=attrgetter("domain")):
            print(
                dedent("""
                    %s {
                        import common
                        reverse_proxy %s {
                            header_down +Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
                        }
                    }""")  # noqa: E501
                % (site.domain, site.backend_authority),
                file=fp,
            )

        for site in sorted(sites_with_alias_domains, key=attrgetter("domain")):
            for alias_domain in sorted(site.alias_domains):
                print(
                    dedent("""
                        %s {
                            import common
                            redir https://%s{uri}
                        }""")
                    % (alias_domain, site.domain),
                    file=fp,
                )


def run(options):
    config = ConfigParser()
    with open(options.config_filename) as fin:
        config.read_file(fin, options.config_filename)

    caddyfile = CaddyfileGenerator()
    for domain in config.sections():
        try:
            alias_domains = config.get(domain, "aliases").split()
        except NoOptionError:
            alias_domains = []

        try:
            backend_authority = config.get(domain, "backend")
        except NoOptionError:
            backend_authority = None

        site = CaddyfileGenerator.Site(alias_domains, backend_authority, domain)
        caddyfile.add(site)

    with NamedTemporaryFile() as temp_file:
        # The idea is to diff against previous content or against
        # empty file when there is no previos content
        with suppress(OSError):  # noqa: SIM117
            with open(options.output_filename, "r+b") as fin:
                temp_file.file.write(fin.read())
                temp_file.file.flush()

        with open(options.output_filename, "w") as fout:
            caddyfile.write_to(fout)

        exit_code = subprocess.call(  # noqa: S603
            ["diff", "-u", temp_file.name, options.output_filename],
        )

        # Write stateful output in the format expected by SaltStack
        if exit_code and options.saltstack:
            print()
            print("changed=yes comment='Caddyfile changed'")


if __name__ == "__main__":
    parser = ArgumentParser()
    parser.add_argument(
        "--config",
        dest="config_filename",
        metavar="FILENAME",
        default="sites.cfg",
        help="Path to config file to read (default: %(default)s)",
    )
    parser.add_argument(
        "--output",
        dest="output_filename",
        metavar="FILENAME",
        default="Caddyfile",
        help="Path to write Caddyfile to (default: %(default)s)",
    )
    parser.add_argument(
        "--saltstack",
        action="store_true",
        help="Add lines signaling changes to SaltStack (default: omitted)",
    )
    options = parser.parse_args()

    try:
        run(options)
    except OSError as e:
        sys.exit(e)
